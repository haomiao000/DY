// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.1
// source: video.proto

package rpc_video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoServiceImpl_UpdateVideoFavoriteCount_FullMethodName      = "/VideoServiceImpl/UpdateVideoFavoriteCount"
	VideoServiceImpl_UpdateVideoCommentCount_FullMethodName       = "/VideoServiceImpl/UpdateVideoCommentCount"
	VideoServiceImpl_GetFavoriteVideoListByVideoId_FullMethodName = "/VideoServiceImpl/GetFavoriteVideoListByVideoId"
	VideoServiceImpl_GetFeeds_FullMethodName                      = "/VideoServiceImpl/GetFeeds"
	VideoServiceImpl_PublishVideo_FullMethodName                  = "/VideoServiceImpl/PublishVideo"
	VideoServiceImpl_GetPublishVideo_FullMethodName               = "/VideoServiceImpl/GetPublishVideo"
)

// VideoServiceImplClient is the client API for VideoServiceImpl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceImplClient interface {
	UpdateVideoFavoriteCount(ctx context.Context, in *UpdateVideoFavoriteCountRequest, opts ...grpc.CallOption) (*UpdateVideoFavoriteCountResponse, error)
	UpdateVideoCommentCount(ctx context.Context, in *UpdateVideoCommentCountRequest, opts ...grpc.CallOption) (*UpdateVideoCommentCountResponse, error)
	GetFavoriteVideoListByVideoId(ctx context.Context, in *GetFavoriteVideoListByVideoIdRequest, opts ...grpc.CallOption) (*GetFavoriteVideoListByVideoIdResponse, error)
	GetFeeds(ctx context.Context, in *GetFeedsReq, opts ...grpc.CallOption) (*GetFeedsRsp, error)
	PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoRsp, error)
	GetPublishVideo(ctx context.Context, in *GetPublishVideoReq, opts ...grpc.CallOption) (*PublishVideoRsp, error)
}

type videoServiceImplClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceImplClient(cc grpc.ClientConnInterface) VideoServiceImplClient {
	return &videoServiceImplClient{cc}
}

func (c *videoServiceImplClient) UpdateVideoFavoriteCount(ctx context.Context, in *UpdateVideoFavoriteCountRequest, opts ...grpc.CallOption) (*UpdateVideoFavoriteCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVideoFavoriteCountResponse)
	err := c.cc.Invoke(ctx, VideoServiceImpl_UpdateVideoFavoriteCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceImplClient) UpdateVideoCommentCount(ctx context.Context, in *UpdateVideoCommentCountRequest, opts ...grpc.CallOption) (*UpdateVideoCommentCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVideoCommentCountResponse)
	err := c.cc.Invoke(ctx, VideoServiceImpl_UpdateVideoCommentCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceImplClient) GetFavoriteVideoListByVideoId(ctx context.Context, in *GetFavoriteVideoListByVideoIdRequest, opts ...grpc.CallOption) (*GetFavoriteVideoListByVideoIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoriteVideoListByVideoIdResponse)
	err := c.cc.Invoke(ctx, VideoServiceImpl_GetFavoriteVideoListByVideoId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceImplClient) GetFeeds(ctx context.Context, in *GetFeedsReq, opts ...grpc.CallOption) (*GetFeedsRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedsRsp)
	err := c.cc.Invoke(ctx, VideoServiceImpl_GetFeeds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceImplClient) PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishVideoRsp)
	err := c.cc.Invoke(ctx, VideoServiceImpl_PublishVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceImplClient) GetPublishVideo(ctx context.Context, in *GetPublishVideoReq, opts ...grpc.CallOption) (*PublishVideoRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishVideoRsp)
	err := c.cc.Invoke(ctx, VideoServiceImpl_GetPublishVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceImplServer is the server API for VideoServiceImpl service.
// All implementations must embed UnimplementedVideoServiceImplServer
// for forward compatibility.
type VideoServiceImplServer interface {
	UpdateVideoFavoriteCount(context.Context, *UpdateVideoFavoriteCountRequest) (*UpdateVideoFavoriteCountResponse, error)
	UpdateVideoCommentCount(context.Context, *UpdateVideoCommentCountRequest) (*UpdateVideoCommentCountResponse, error)
	GetFavoriteVideoListByVideoId(context.Context, *GetFavoriteVideoListByVideoIdRequest) (*GetFavoriteVideoListByVideoIdResponse, error)
	GetFeeds(context.Context, *GetFeedsReq) (*GetFeedsRsp, error)
	PublishVideo(context.Context, *PublishVideoReq) (*PublishVideoRsp, error)
	GetPublishVideo(context.Context, *GetPublishVideoReq) (*PublishVideoRsp, error)
	mustEmbedUnimplementedVideoServiceImplServer()
}

// UnimplementedVideoServiceImplServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoServiceImplServer struct{}

func (UnimplementedVideoServiceImplServer) UpdateVideoFavoriteCount(context.Context, *UpdateVideoFavoriteCountRequest) (*UpdateVideoFavoriteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoFavoriteCount not implemented")
}
func (UnimplementedVideoServiceImplServer) UpdateVideoCommentCount(context.Context, *UpdateVideoCommentCountRequest) (*UpdateVideoCommentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoCommentCount not implemented")
}
func (UnimplementedVideoServiceImplServer) GetFavoriteVideoListByVideoId(context.Context, *GetFavoriteVideoListByVideoIdRequest) (*GetFavoriteVideoListByVideoIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteVideoListByVideoId not implemented")
}
func (UnimplementedVideoServiceImplServer) GetFeeds(context.Context, *GetFeedsReq) (*GetFeedsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeds not implemented")
}
func (UnimplementedVideoServiceImplServer) PublishVideo(context.Context, *PublishVideoReq) (*PublishVideoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServiceImplServer) GetPublishVideo(context.Context, *GetPublishVideoReq) (*PublishVideoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishVideo not implemented")
}
func (UnimplementedVideoServiceImplServer) mustEmbedUnimplementedVideoServiceImplServer() {}
func (UnimplementedVideoServiceImplServer) testEmbeddedByValue()                          {}

// UnsafeVideoServiceImplServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceImplServer will
// result in compilation errors.
type UnsafeVideoServiceImplServer interface {
	mustEmbedUnimplementedVideoServiceImplServer()
}

func RegisterVideoServiceImplServer(s grpc.ServiceRegistrar, srv VideoServiceImplServer) {
	// If the following call panics, it indicates UnimplementedVideoServiceImplServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoServiceImpl_ServiceDesc, srv)
}

func _VideoServiceImpl_UpdateVideoFavoriteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoFavoriteCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceImplServer).UpdateVideoFavoriteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoServiceImpl_UpdateVideoFavoriteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceImplServer).UpdateVideoFavoriteCount(ctx, req.(*UpdateVideoFavoriteCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoServiceImpl_UpdateVideoCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoCommentCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceImplServer).UpdateVideoCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoServiceImpl_UpdateVideoCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceImplServer).UpdateVideoCommentCount(ctx, req.(*UpdateVideoCommentCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoServiceImpl_GetFavoriteVideoListByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteVideoListByVideoIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceImplServer).GetFavoriteVideoListByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoServiceImpl_GetFavoriteVideoListByVideoId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceImplServer).GetFavoriteVideoListByVideoId(ctx, req.(*GetFavoriteVideoListByVideoIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoServiceImpl_GetFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceImplServer).GetFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoServiceImpl_GetFeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceImplServer).GetFeeds(ctx, req.(*GetFeedsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoServiceImpl_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceImplServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoServiceImpl_PublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceImplServer).PublishVideo(ctx, req.(*PublishVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoServiceImpl_GetPublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceImplServer).GetPublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoServiceImpl_GetPublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceImplServer).GetPublishVideo(ctx, req.(*GetPublishVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoServiceImpl_ServiceDesc is the grpc.ServiceDesc for VideoServiceImpl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoServiceImpl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoServiceImpl",
	HandlerType: (*VideoServiceImplServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateVideoFavoriteCount",
			Handler:    _VideoServiceImpl_UpdateVideoFavoriteCount_Handler,
		},
		{
			MethodName: "UpdateVideoCommentCount",
			Handler:    _VideoServiceImpl_UpdateVideoCommentCount_Handler,
		},
		{
			MethodName: "GetFavoriteVideoListByVideoId",
			Handler:    _VideoServiceImpl_GetFavoriteVideoListByVideoId_Handler,
		},
		{
			MethodName: "GetFeeds",
			Handler:    _VideoServiceImpl_GetFeeds_Handler,
		},
		{
			MethodName: "PublishVideo",
			Handler:    _VideoServiceImpl_PublishVideo_Handler,
		},
		{
			MethodName: "GetPublishVideo",
			Handler:    _VideoServiceImpl_GetPublishVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
