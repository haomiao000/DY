// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: user.proto

package rpc_user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserServiceImpl_Login_FullMethodName        = "/UserServiceImpl/Login"
	UserServiceImpl_Register_FullMethodName     = "/UserServiceImpl/Register"
	UserServiceImpl_GetUser_FullMethodName      = "/UserServiceImpl/GetUser"
	UserServiceImpl_BatchGetUser_FullMethodName = "/UserServiceImpl/BatchGetUser"
)

// UserServiceImplClient is the client API for UserServiceImpl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceImplClient interface {
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	GetUser(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserResponse, error)
	BatchGetUser(ctx context.Context, in *BatchGetUserRequest, opts ...grpc.CallOption) (*BatchGetUserResponse, error)
}

type userServiceImplClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceImplClient(cc grpc.ClientConnInterface) UserServiceImplClient {
	return &userServiceImplClient{cc}
}

func (c *userServiceImplClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserServiceImpl_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceImplClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, UserServiceImpl_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceImplClient) GetUser(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserServiceImpl_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceImplClient) BatchGetUser(ctx context.Context, in *BatchGetUserRequest, opts ...grpc.CallOption) (*BatchGetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUserResponse)
	err := c.cc.Invoke(ctx, UserServiceImpl_BatchGetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceImplServer is the server API for UserServiceImpl service.
// All implementations must embed UnimplementedUserServiceImplServer
// for forward compatibility
type UserServiceImplServer interface {
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	GetUser(context.Context, *UserInfoRequest) (*UserResponse, error)
	BatchGetUser(context.Context, *BatchGetUserRequest) (*BatchGetUserResponse, error)
	mustEmbedUnimplementedUserServiceImplServer()
}

// UnimplementedUserServiceImplServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceImplServer struct {
}

func (UnimplementedUserServiceImplServer) Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceImplServer) Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceImplServer) GetUser(context.Context, *UserInfoRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceImplServer) BatchGetUser(context.Context, *BatchGetUserRequest) (*BatchGetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUser not implemented")
}
func (UnimplementedUserServiceImplServer) mustEmbedUnimplementedUserServiceImplServer() {}

// UnsafeUserServiceImplServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceImplServer will
// result in compilation errors.
type UnsafeUserServiceImplServer interface {
	mustEmbedUnimplementedUserServiceImplServer()
}

func RegisterUserServiceImplServer(s grpc.ServiceRegistrar, srv UserServiceImplServer) {
	s.RegisterService(&UserServiceImpl_ServiceDesc, srv)
}

func _UserServiceImpl_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceImplServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceImpl_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceImplServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceImpl_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceImplServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceImpl_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceImplServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceImpl_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceImplServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceImpl_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceImplServer).GetUser(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceImpl_BatchGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceImplServer).BatchGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceImpl_BatchGetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceImplServer).BatchGetUser(ctx, req.(*BatchGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServiceImpl_ServiceDesc is the grpc.ServiceDesc for UserServiceImpl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServiceImpl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserServiceImpl",
	HandlerType: (*UserServiceImplServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserServiceImpl_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserServiceImpl_Register_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserServiceImpl_GetUser_Handler,
		},
		{
			MethodName: "BatchGetUser",
			Handler:    _UserServiceImpl_BatchGetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
