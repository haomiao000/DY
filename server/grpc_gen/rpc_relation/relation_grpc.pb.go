// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: relation.proto

package rpc_relation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RelationServiceImpl_RelationAction_FullMethodName  = "/RelationServiceImpl/RelationAction"
	RelationServiceImpl_GetFollowList_FullMethodName   = "/RelationServiceImpl/GetFollowList"
	RelationServiceImpl_GetFollowerList_FullMethodName = "/RelationServiceImpl/GetFollowerList"
	RelationServiceImpl_GetFriendList_FullMethodName   = "/RelationServiceImpl/GetFriendList"
)

// RelationServiceImplClient is the client API for RelationServiceImpl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceImplClient interface {
	RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
	GetFollowList(ctx context.Context, in *RelationFollowListRequest, opts ...grpc.CallOption) (*RelationFollowListResponse, error)
	GetFollowerList(ctx context.Context, in *RelationFollowerListRequest, opts ...grpc.CallOption) (*RelationFollowerListResponse, error)
	GetFriendList(ctx context.Context, in *RelationFriendListRequest, opts ...grpc.CallOption) (*RelationFriendListResponse, error)
}

type relationServiceImplClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceImplClient(cc grpc.ClientConnInterface) RelationServiceImplClient {
	return &relationServiceImplClient{cc}
}

func (c *relationServiceImplClient) RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationActionResponse)
	err := c.cc.Invoke(ctx, RelationServiceImpl_RelationAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceImplClient) GetFollowList(ctx context.Context, in *RelationFollowListRequest, opts ...grpc.CallOption) (*RelationFollowListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationFollowListResponse)
	err := c.cc.Invoke(ctx, RelationServiceImpl_GetFollowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceImplClient) GetFollowerList(ctx context.Context, in *RelationFollowerListRequest, opts ...grpc.CallOption) (*RelationFollowerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationFollowerListResponse)
	err := c.cc.Invoke(ctx, RelationServiceImpl_GetFollowerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceImplClient) GetFriendList(ctx context.Context, in *RelationFriendListRequest, opts ...grpc.CallOption) (*RelationFriendListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationFriendListResponse)
	err := c.cc.Invoke(ctx, RelationServiceImpl_GetFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceImplServer is the server API for RelationServiceImpl service.
// All implementations must embed UnimplementedRelationServiceImplServer
// for forward compatibility
type RelationServiceImplServer interface {
	RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error)
	GetFollowList(context.Context, *RelationFollowListRequest) (*RelationFollowListResponse, error)
	GetFollowerList(context.Context, *RelationFollowerListRequest) (*RelationFollowerListResponse, error)
	GetFriendList(context.Context, *RelationFriendListRequest) (*RelationFriendListResponse, error)
	mustEmbedUnimplementedRelationServiceImplServer()
}

// UnimplementedRelationServiceImplServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServiceImplServer struct {
}

func (UnimplementedRelationServiceImplServer) RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedRelationServiceImplServer) GetFollowList(context.Context, *RelationFollowListRequest) (*RelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedRelationServiceImplServer) GetFollowerList(context.Context, *RelationFollowerListRequest) (*RelationFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (UnimplementedRelationServiceImplServer) GetFriendList(context.Context, *RelationFriendListRequest) (*RelationFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedRelationServiceImplServer) mustEmbedUnimplementedRelationServiceImplServer() {}

// UnsafeRelationServiceImplServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceImplServer will
// result in compilation errors.
type UnsafeRelationServiceImplServer interface {
	mustEmbedUnimplementedRelationServiceImplServer()
}

func RegisterRelationServiceImplServer(s grpc.ServiceRegistrar, srv RelationServiceImplServer) {
	s.RegisterService(&RelationServiceImpl_ServiceDesc, srv)
}

func _RelationServiceImpl_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceImplServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationServiceImpl_RelationAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceImplServer).RelationAction(ctx, req.(*RelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationServiceImpl_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceImplServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationServiceImpl_GetFollowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceImplServer).GetFollowList(ctx, req.(*RelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationServiceImpl_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceImplServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationServiceImpl_GetFollowerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceImplServer).GetFollowerList(ctx, req.(*RelationFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationServiceImpl_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceImplServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationServiceImpl_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceImplServer).GetFriendList(ctx, req.(*RelationFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationServiceImpl_ServiceDesc is the grpc.ServiceDesc for RelationServiceImpl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationServiceImpl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RelationServiceImpl",
	HandlerType: (*RelationServiceImplServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationAction",
			Handler:    _RelationServiceImpl_RelationAction_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _RelationServiceImpl_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _RelationServiceImpl_GetFollowerList_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _RelationServiceImpl_GetFriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
